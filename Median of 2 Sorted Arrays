class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
      if(nums1.size() == 0 )
      {
          if(nums2.size()%2)
          {
             return (double)nums2[nums2.size()/2]; 
          }
          else
          {
             return (nums2[nums2.size()/2] + nums2[nums2.size()/2 - 1])/2.0;
          }    
      }
      else if(nums2.size() == 0)
      {
          if(nums1.size()%2)
          {
             return (double)nums1[nums1.size()/2]; 
          }
          else
          {
             return (nums1[nums1.size()/2] + nums1[nums1.size()/2 - 1])/2.0;
          }
      }    
      else
      {
          int partX,partY,maxLeftX,maxLeftY,minRightX,minRightY; 
          if(nums1.size()< nums2.size())
          {
             int start=0;
             int end=nums1.size();
             
             
             while(start<=end)
             {
                 partX= (start+end)/2;
                 partY= (nums1.size() + nums2.size() +1)/2 - partX;
                 maxLeftX = partX==0? -1000001 : nums1[partX-1];
                 maxLeftY = partY==0? -1000001 : nums2[partY-1];
                 minRightX = partX==nums1.size() ? 1000001 : nums1[partX];
                 minRightY = partY==nums2.size() ? 1000001 : nums2[partY];
                 
                 if(maxLeftX <= minRightY  && maxLeftY <= minRightX)
                 {
                    if((nums1.size() + nums2.size())%2)
                    {
                        return (double)max(maxLeftX,maxLeftY);
                    }
                    else
                    {
                        return (max(maxLeftX,maxLeftY)+min(minRightX,minRightY))/2.0;
                    }    
                 }
                 else if(maxLeftX > minRightY)
                 {
                     end=partX-1;
                 }
                 else
                 {
                     start=partX+1;
                 }
             }    
              
          }
          else
          {
             int start=0;
             int end=nums2.size();
             
             while(start<=end)
             {
                 partX= (start+end)/2;
                 partY= (nums1.size() + nums2.size() +1)/2 - partX;
                 maxLeftX = partX==0? -1000001 : nums2[partX-1];
                 maxLeftY = partY==0? -1000001 : nums1[partY-1];
                 minRightX = partX==nums2.size() ? 1000001 : nums2[partX];
                 minRightY = partY==nums1.size() ? 1000001 : nums1[partY];
                 
                 if(maxLeftX <= minRightY  && maxLeftY <= minRightX)
                 {
                    if((nums1.size() + nums2.size())%2)
                    {
                        return (double)max(maxLeftX,maxLeftY);
                    }
                    else
                    {
                        return (max(maxLeftX,maxLeftY)+min(minRightX,minRightY))/2.0;
                    }    
                 }
                 else if(maxLeftX > minRightY)
                 {
                     end=partX-1;
                 }
                 else
                 {
                     start=partX+1;
                 }
             }  
          }    
      }
     return 0.0;    
    }
};
