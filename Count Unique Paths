/* Bruteforce Approach : Time Complexity ( O(2^ max(m,n) ) )  , Space Complexity : O(max(m,n))*/

class Solution {
public:
    void dfs(int m,int n,int x,int y,int &cnt)
    {
        if(x==(m-1) && y== (n-1))
        {    
         cnt++;
         return;
        }
        if(x+1 < m)
         dfs(m,n,x+1,y,cnt);
        if(y+1 < n)
         dfs(m,n,x,y+1,cnt);       
    }    
    int uniquePaths(int m, int n) {
      int cnt=0;
      dfs(m,n,0,0,cnt);
      return cnt;  
    }
};

/* Optimized Approach : Time Complexity ( O(m*n)  ) , Space Complexity : O(m*n) */

class Solution {
public:    
    int uniquePaths(int m, int n) {
        
      vector < vector <int> > dp(m,vector<int>(n,0));
        
      for(int i=0;i<m;i++)
        dp[i][0]=1;
      for(int i=0;i<n;i++)
        dp[0][i]=1;
        
      for(int i=1;i<m;i++)
       for(int j=1;j<n;j++)
          dp[i][j]= dp[i-1][j]+dp[i][j-1];
        
      return dp[m-1][n-1];  
    }
};

