#include <bits/stdc++.h>

using namespace std;

// Node class to represent
// a node of the linked list.
class Node {
public:
    int data;
    Node* next;

    // Default constructor
    Node()
    {
        data = 0;
        next = nullptr;
    }

    // Parameterized Constructor
    Node(int data)
    {
        this->data = data;
        this->next = nullptr;
    }
};

// Linked list class to
// implement a linked list.
class Linkedlist {
    Node* head;

public:
    // Default constructor
    Linkedlist() { head = nullptr; }

    // Function to insert a
    // node at the end of the
    // linked list.
    void insertNodeAtEnd(int);

    // Function to insert a
    // node at the front of the
    // linked list.
    void insertNodeAtFront(int);

    // Function to insert a
    // node at any position of the
    // linked list.
    void insertNodeAnyPos(int,int);
    // Function to reverse the
    // linked list.
    void reverseList();

    // Function to print the
    // linked list.
    void printList();

    // Function to delete the
    // node at given position
    void deleteNode(int);
};

void Linkedlist::insertNodeAtEnd(int val)
{
   Node* temp = new Node(val);
   if(head == nullptr)
        head=temp;
   else
   {
      Node* curr=head;
      while(curr->next != nullptr)
        curr=curr->next;
      curr->next=temp;
   }

}
void Linkedlist::insertNodeAtFront(int val)
{
   Node* temp = new Node(val);
   if(head == nullptr)
        head=temp;
   else
   {
        temp->next = head;
        head=temp;
   }
}
void Linkedlist::insertNodeAnyPos(int val,int pos)
{
   if(pos==0)
   {
     this->insertNodeAtFront(val);
     return;
   }
   Node* temp = new Node(val);
   if(head == nullptr)
        head=temp;
   else
   {
        int cnt=1;
        Node* curr=head;
        while(curr->next != nullptr && cnt<pos)
        {
            curr=curr->next;
            cnt++;
        }
        if(cnt<pos)
        {
           cout<<"Insufficient number of elements in list, Insertion failed\n";
        }
        else
        {
           Node* tail = curr->next;
           curr->next = temp;
           temp->next = tail;
        }
   }
}
void Linkedlist::deleteNode(int pos)
{
   if(head == nullptr)
    {
       cout<<"List is Empty, Deletion failed\n";
    }
   else
    {
       if(pos==0)
       {
           Node* Temp=head;
           head=head->next;
           delete Temp;
       }
       else
       {
        int cnt=0;
        Node* curr=head;
        while(curr->next != nullptr && cnt<pos)
        {
            curr=curr->next;
            cnt++;
        }
        if(cnt<pos)
        {
           cout<<"Insufficient number of elements in list, Deletion failed\n";
        }
        else
        {
           Node* Temp = curr->next;
           curr->next = Temp->next;
           delete Temp;
        }
       }
    }
}
void Linkedlist::printList()
{
   Node* Curr=head;
   if(head == nullptr)
   {
       cout<<"Empty List...";
       return;
   }

   while(Curr != nullptr)
   {
       cout<<Curr->data<<" ";
       Curr=Curr->next;
   }
   cout<<"\n";
}
void Linkedlist::reverseList()
	{
		if (head == NULL || head->next == NULL)
            return;

		Node* curr = head;
		Node* prev = NULL,*nextNode=NULL;

		while(curr)
		{
			nextNode=curr->next;
			curr->next=prev;
			prev=curr;
			curr=nextNode;
		}
		head=prev;

	}

int main()
{
    Linkedlist* L = new Linkedlist();
    L->insertNodeAtFront(1);
    L->insertNodeAtFront(2);
    L->insertNodeAtEnd(2);
    L->insertNodeAnyPos(3,1);
    L->reverseList();
    L->printList();
    L->deleteNode(1);
    L->deleteNode(1);
    L->deleteNode(0);
    L->printList();
    L->deleteNode(1);
    L->deleteNode(0);
    L->printList();

    return 0;
}
