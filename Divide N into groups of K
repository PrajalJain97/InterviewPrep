// C++ implementation to count the
// number of ways to divide N in
// groups such that each group
// has K number of elements

// Similar Problem: https://www.geeksforgeeks.org/count-number-of-ways-to-partition-a-set-into-k-subsets/

#include <bits/stdc++.h>

using namespace std;

// Function to count the number of
// ways to divide the number N in groups
int countWaystoDivide(int n, int k)
{
	if (n < k)
		return 0; // When n is less than k, No way to divide
				// into groups
	vector<vector<int> > dp(n + 1, vector<int>(k + 1));

	for (int i = 1; i <= n; i++)
		dp[i][1]
			= 1; // exact one way to divide n to 1 group
	dp[0][0] = 1;

	for (int i = 1; i <= n; i++) {
		for (int j = 2; j <= k; j++) {
			if (i >= j)
				dp[i][j] = dp[i - j][j] + dp[i - 1][j - 1];
			else
				dp[i][j]
					= dp[i - 1][j - 1]; // i<j so dp[i-j][j]
										// becomes zero
		}
	}
	return dp[n][k]; // returning number of ways to divide N
					// in k groups
}

// Driver Code
int main()
{
	int N = 8;
	int K = 4;

	cout << countWaystoDivide(N, K);
	return 0;
}
