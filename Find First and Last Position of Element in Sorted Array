class Solution {
public:
    int find_lower_bound(vector<int> &a,int l,int r, int x)
    {
        if(a[0] == x)
          return 0;
        int mid;
        while(l<=r)
        {
           mid=l+(r-l)/2;
           if(a[mid]==x && a[mid-1]<x)
             return mid;
           else if(a[mid] >= x)
             r=mid-1;
           else
             l=mid+1;  
        }
          return -1;    
    }
    int find_upper_bound(vector<int> &a,int l,int r, int x)
    {
        int max_pos=a.size()-1;
        if(a[max_pos] == x)
          return max_pos;  
        int mid;
        while(l<=r)
        {
           mid=l+(r-l)/2;
           if(a[mid]==x && a[mid+1]>x)
             return mid;  
           else if(a[mid] <= x)
             l=mid+1;  
           else
             r=mid-1;  
        }
          return -1;
    }    
    vector<int> searchRange(vector<int>& nums, int target) {
        
        if(!nums.size())
           return vector<int> {-1,-1};
        else if(nums.size() == 1)
        {
           if(nums[0] == target)
             return vector<int> {0,0};
           else
             return vector<int> {-1,-1};   
        }
        int l_pos=find_lower_bound(nums,0,nums.size()-1,target),u_pos=-1;
        if(l_pos < 0)
           return vector<int> {-1,-1};
        else
            u_pos=find_upper_bound(nums,0,nums.size()-1,target); 
            
        return vector<int> {l_pos,u_pos};    
    }
};
