// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;



 // } Driver Code Ends
class Solution
{
    priority_queue<int> max_heap;
    priority_queue<int, vector<int>, greater<int> > min_heap;
    public:
    //Function to insert heap.
    void insertHeap(int &x)
    {
        int size1=max_heap.size(),size2=min_heap.size();
        if(size1 > size2)
        {
            if(x>=max_heap.top())
            {
              min_heap.push(x);   
            }
            else
            {
              min_heap.push(max_heap.top());
              max_heap.pop();
              max_heap.push(x);
            }
        }
        else
        {
            if(!size1)
                max_heap.push(x);
            else
            {
              if(x<min_heap.top())
            {
              max_heap.push(x);   
            }
            else
            {
              max_heap.push(min_heap.top());
              min_heap.pop();
              min_heap.push(x);
            } 
            }
            
        }
        balanceHeaps();
    }
    
    //Function to balance heaps.
    void balanceHeaps()
    {
       getMedian(); 
    }
    
    //Function to return Median.
    double getMedian()
    {
       int size1=max_heap.size(),size2=min_heap.size(); 
       if((size1+size2)&1)
       {
           if(size1>size2)
            return (double)max_heap.top();
           else
            return (double)min_heap.top();
       }
       else
       {
           if(!max_heap.empty() && !min_heap.empty())
            return (max_heap.top() + min_heap.top())/2.0;
           else if(!max_heap.empty())
            return (double)max_heap.top();
           else
            return (double)min_heap.top();
       }
    }
};


// { Driver Code Starts.

int main()
{
    int n, x;
    int t;
    cin>>t;
    while(t--)
    {
    	Solution ob;
    	cin >> n;
    	for(int i = 1;i<= n; ++i)
    	{
    		cin >> x;
    		ob.insertHeap(x);
    	    cout << floor(ob.getMedian()) << endl;
    	}
    }
	return 0;
}  // } Driver Code Ends
